use std::buf::{MemoryBuffer, MemoryBufferWriter, MemoryBufferReader}
use std::evm::keccak256_mem
use std::precompiles


// errors
struct MerkleProofInvalidMultiproof{}
struct Checker { pub res: u256} 

contract MerfleProof {
    pub fn verify(self, proof: Array<u256, 4>, root: u256, leaf: u256) -> bool {
        return process_proof(proof: proof, leaf) == root
    }

    fn process_proof(proof: Array<u256, 4>, leaf: u256) -> u256 {
        let mut computedHash: u256 = leaf

        let mut i: u8 = 0
        while i < 4 {
            computedHash = hash(a: computedHash, b: proof[i])
            i += 1
        } 
        return computedHash
    }

    pub fn multi_verify(self, proof: Array<u256, 5>, proof_flags: Array<bool, 6>, root: u256, leaves: Array<u256, 2>) -> bool {
        return multi_process_proof(proof, proof_flags, leaves) == root
    }

    fn multi_process_proof(proof: Array<u256, 5>, proof_flags: Array<bool, 6>, leaves: Array<u256, 2>) -> u256 {
        let leaves_len: u256  = 2;
        let proof_len: u256  = 5;
        let total_hashes: u256 = 6;

        // Check proof validity.
        if leaves_len + proof_len != total_hashes + 1 {
            revert MerkleProofInvalidMultiproof();
        }

        let mut hashes: Array<u256, 6> = [0,0,0,0,0,0];
        let mut leaf_pos: u256 = 0;
        let mut hash_pos: u256 = 0;
        let mut proof_pos: u256 = 0;

        let mut i: u256 = 0;
        while i < total_hashes {
            let mut a: u256 = 0;
            if leaf_pos < leaves_len {
                a = leaves[leaf_pos];
                leaf_pos += 1;
            } else { 
                a = hashes[hash_pos];
                hash_pos += 1;
            }

            let mut b: u256 = 0;
            if proof_flags[i] {
                if leaf_pos < leaves_len { 
                    b = leaves[leaf_pos];
                    leaf_pos += 1;
                } else {
                    b = hashes[hash_pos];
                    hash_pos += 1;
                }
            } else {
                b = proof[proof_pos];
                proof_pos += 1;
            }

            hashes[i] = hash(a, b);
            i += 1;
        }

        if (total_hashes > 0) {
            if (proof_pos != proof_len) {
                revert MerkleProofInvalidMultiproof();
            }
            return hashes[total_hashes - 1]
        } else if (leaves_len > 0) {
            return leaves[0];
        } else {
            return proof[0];
        }
    }
}

fn hash(a: u256, b: u256) -> u256 {
    let mut buf: MemoryBuffer = MemoryBuffer::new(len: 64);
    let mut writer: MemoryBufferWriter = buf.writer();

    if a < b {
        writer.write(value: a);
        writer.write(value: b);
    } else {
        writer.write(value: b);
        writer.write(value: a);
    }

    let result: u256 = keccak256_mem(buf);

    // ctx.emit(result)
    return result ;
}

#test
fn test_multi_merkle_proof(mut ctx: Context) {
    // Create a new `Main` contract via `ctx` and test that `get_42` return 42.
    let main: MerfleProof = MerfleProof.create(ctx, 0);
    let proof: Array<u256,5> = [
        0x60648906e1a3f55dd188e992dc24db68c6b6d455fe925705f5e110ed7889ad90,
        0xdd6d5a0a35006776f24068a46cc4a404bfb131f85e7d38d70bb28c66b2579b25,
        0xb587c43d463643f735badf2515ffbe4e7b7296bff3aed66d06f3f994c4245e97,
        0xc049eb576acf017099708fcd0bef59b4de4272d73237ef04825a9a8b6a64885a,
        0x932d45187e8f5d15ef48ca81909ab071138587fff4e6588d5b1bcb06d0d2e95a
    ];
    let leaves: Array<u256, 2> = [
        // keccak256(bytes.concat(keccak256(abi.encode(0x2222222222222222222222222222222222222222, '2')))),
        0x4397c1fe255e3a9d3a85daaf9e1d39e0eeb9dc120e931f5af6d0a6f8a3315a4d,

        // keccak256(bytes.concat(keccak256(abi.encode(0x2222222222222222222222222222222222222222, '6')))),
        0xc70cbde2245859397b5cda4696e56e0a6a873268de60d156338f1366b480626f
    ];
    let root: u256 = 0xff21649d1ef3facf83fe9657150a660a16c80a00d381551158c33e7dac9af785;
    let proof_flags: Array<bool, 6> = [ false, false, false, false, false, true ];

    
    assert main.multi_verify(proof, proof_flags, root, leaves) == true
}

#test
fn test_single_merkle_proof(mut ctx: Context) {
    // Create a new `Main` contract via `ctx` and test that `get_42` return 42.
    let main: MerfleProof = MerfleProof.create(ctx, 0);
    let proof: Array<u256,4> = [
        0x92905f1a3d48420e077e69a8935a85c9c3474a87c6e862fddb469ec39ad99e81,
        0xc483bd7f540edcc7b3ce5bbbed3993990bfa99995b9af85ba26fd87ae82073db,
        0x932d45187e8f5d15ef48ca81909ab071138587fff4e6588d5b1bcb06d0d2e95a,
        0xf0d3c4944e1c88ad7b594b8dfa74d053c70e20b9debbf48ff295425f602ed891
    ];
    // keccak256(bytes.concat(keccak256(abi.encode(0x7222222222222222222222222222222222222222, 7))))
    let leaf: u256 = 0x9890fc55f655ead593aa538e69317911bf3bae38b8687f87a3a6cc1044f90be8;
    let root: u256 = 0xff21649d1ef3facf83fe9657150a660a16c80a00d381551158c33e7dac9af785;

    
    assert main.verify(proof, root, leaf) == true
}